# MLflow model serving with uv
FROM python:3.10-slim

# Build argument for model path - this should be the path to model artifacts
ARG MODEL_PATH=mlruns/690379899521214293/models/m-126169e0bd3a48c8949dd3c9a1cd08ee/artifacts

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    git \
    python3-venv \
    python3-pip \
    libbz2-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libffi-dev \
    libreadline-dev \
    libssl-dev \
    zlib1g-dev \
    liblzma-dev \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install virtualenv at system level
RUN pip3 install virtualenv

# Install pyenv
RUN curl https://pyenv.run | bash
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="$PYENV_ROOT/bin:$PATH"
RUN echo 'eval "$(pyenv init -)"' >> ~/.bashrc

# Install uv
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Update PATH to include uv installation location
ENV PATH="/root/.local/bin:$PATH"

# Install MLflow using uv tool with virtualenv dependency
RUN /root/.local/bin/uv tool install mlflow --with virtualenv

# Install virtualenv in the MLflow tool environment
RUN /root/.local/bin/uv tool install --with virtualenv mlflow --upgrade

# Set working directory
WORKDIR /app

# Copy only the MLflow model artifacts (contains all needed code and dependencies)
COPY ${MODEL_PATH}/ /app/model/

# Run MLflow prepare-env to prepare the model environment and cache dependencies
RUN cd /app/model && /root/.local/bin/uv tool run mlflow models prepare-env --model-uri "file:///app/model"

# Set environment variables
ENV MODEL_PATH=/app/model
ENV PATH="/root/.pyenv/bin:/root/.local/bin:$PATH"

# Expose MLflow serving port
EXPOSE 5000

# Copy and setup entrypoint script
COPY Docker/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Health check for MLflow model serving
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/ping || exit 1

# Run the entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]