FROM python:3.10-slim AS build

RUN apt-get update && apt-get install -y \
	curl \
	build-essential \
	git \
	&& rm -rf /var/lib/apt/lists/*

RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:$PATH"

WORKDIR /app

COPY pyproject.toml uv.lock README.md ./
COPY src/ ./src/
COPY mlruns/ ./mlruns/

RUN uv pip install --system -e .

RUN property-value-estimator-model copy-model /app/model

FROM python:3.10-slim

RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    git \
    python3-venv \
    python3-pip \
    libbz2-dev \
    libncurses5-dev \
    libncursesw5-dev \
    libffi-dev \
    libreadline-dev \
    libssl-dev \
    zlib1g-dev \
    liblzma-dev \
    libsqlite3-dev \
    && rm -rf /var/lib/apt/lists/*

RUN pip3 install virtualenv

# Install pyenv
RUN curl https://pyenv.run | bash
ENV PYENV_ROOT="/root/.pyenv"
ENV PATH="$PYENV_ROOT/bin:$PATH"
RUN echo 'eval "$(pyenv init -)"' >> ~/.bashrc

RUN curl -LsSf https://astral.sh/uv/install.sh | sh

ENV PATH="/root/.local/bin:$PATH"

RUN uv tool install mlflow --with virtualenv

RUN uv tool install --with virtualenv mlflow --upgrade

WORKDIR /app

COPY --from=build /app/model/ /app/model/

RUN pyenv global system
RUN uv venv && uv pip install --system -r /app/model/requirements.txt
RUN cd /app/model && uv tool run mlflow models prepare-env --model-uri "file:///app/model"

ENV MODEL_PATH=/app/model
ENV PATH="/root/.pyenv/bin:/root/.local/bin:$PATH"

EXPOSE 5000

COPY docker/model/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5000/ping || exit 1

ENTRYPOINT ["/app/entrypoint.sh"]